1. 예약어 : static, final
static (고정적)
- static은 ‘고정된’이란 의미를 지닌다.
- 정적멤버는 클래스에 고정된 멤버로 객체를 생성하지 않고 사용할 수 있는 멤버변수와 메소드를 말한다,
- 정적 멤버는 객체(인스턴스)에 소속된 멤버가 아니라, 클래스에 소속된 멤버이기 때문에 클래스 멤버라고도 한다.
- 인스턴스 변수는 하나의 클래스로부터 생성되었더라도 각기 다른 값을 유지하지만, 클래스변수는 인스턴스에 관계없이 같은 값을 갖는다. 그 이유는 하나의 변수를 모든 인스턴스가 공유하기 때문이다. 
- 정리
	1) 정적 멤버 변수
	- 모든 인스턴스에 공통적으로 사용되는 클래스 변수
	- 인스턴스를 생성하지 않고도 사용 가능
	- 클래스가 메모리에 로드될 때 생성됨
	2) 정적 메소드
	- 인스턴스를 생성하지 않고도 호출이 가능
	- 정적 메소드 내에서는 인스턴스 멤버들을 직접 사용할 수 없다.

final (최종적)
- final은 ‘마지막의’ 혹은 ‘변경될 수 없는’ 이란 의미를 지닌다.
- final이 변수에 사용되어 초기값을 저장할 경우 프로그램 실행 도중 값이 변경될 수 없고, 메소드에 사용되면 오버라이딩을 할 수 없게 되고, 클래스에 사용되면 자신을 확장하는 자식 클래스를 정의하지 못하게 된다.
- final이 붙은 변수는 상수로 간주하기 때문에 일반적으로 선언과 동시에 초기화를 하지만, 생성자에서 초기화 되도록 할 수도 있다. 
- 한편, 상수는 불변의 값을 뜻한다.
- 변수 앞에 static과 final을 함께 사용할 경우 객체마다 저장할 필요가 없는 공용성을 띠게 되고, 여러 값으로 초기화될 수 없게 되므로 상수로서의 기능을 하게 된다.


2. DTO 데이터 전송 객체의 기능 및 관리법
- DTO(Data Transfer Object)는 각 계층간 데이터 전송을 위해 아무런 로직을 갖지 않고, 오직 데이터를 담기위해 사용되는 필드와 Getter/Setter 메소드만을 가지는 POJO(Plain Old Java Object)다. 여기서 POJO는 특정 인터페이스 혹은 클래스 상속과 같은 특정 규약에 의해 종속되지 않는 순수 자바 클래스를 말한다. 
- DTO는 각 계층간(뷰, 컨트롤러, 비지니스) 데이터 교환을 위해 사용되는 객체다.
- DTO는 관계형 데이터베이스의 필드(컬럼)값에 해당하는 멤버 변수를 private으로 설정하고, Getter/Setter 메소드를 정의하여 변수에 값을 저장하거나 불러오는 형태를 띤다, 
- 만약 클라이언트의 요청을 DTO에 담지 않고 일일이 하나씩 응답해줄 경우, 네트워크 상에 과도한 트래픽이 발생할 수 있기 때문에 그 부담을 줄일 수 있다.


3. 생성자
- 생성자는 인스턴스가 생성될 때 호출되는 ‘인스턴스 초기화 메소드’이다. 
- 따라서, 인스턴스 변수의 초기화 작업에 주로 사용되며, 인스턴스 생성 시에 실행되어야 할 작업을 위해서 사용되기도 한다.
- 생성자 또한 메소드처럼 클래스 내에 선언되며, 구조도 메소드와 유사하지만 리턴값이 없다는 점이 다르다.
- 생성자의 조건으로는 
	1) 생성자의 이름은 클래스의 이름과 같아야 한다.
	2) 생성자는 리턴 값이 없다
- 생성자도 오버로딩이 가능하므로 하나의 클래스에 여러 생성자가 존재할 수 있다.
- 생성자 내에서 다른 생성자를 호출할 수 있는데, 호출 시 반드시 클래스 명이 아닌 this키워드를 사용해야 하며 생성자 내 첫번째 줄에 작성해야 한다. 
ex)
	 Car(String color) {
		door = 5;
		Car(color, "auto", 4);
	}
	에러1. 생성자의 두 번째 줄에서 다른 생성자를 호출하고 있다.
	에러2. this(color, "auto", 4); : 클래스명이 아닌 this키워드를 사용해야 한다. 
	

4. 싱글톤
- 싱글톤 패턴은 전체 시스템에서 하나의 인스턴스만 존재하도록 보장하는 객체 생성패턴을 말한다.
- 싱글톤 패턴을 쓰는 이유는 고정된 메모리 영역을 얻음과 동시에 단 한 번의 new연산자로 생성된 인스턴스를 사용하기 때문에 메모리 낭비를 방지할 수 있다. 
- 또한 싱글톤으로 만들어진 인스턴스는 전역적이기 때문에 다른 클래스의 인스턴스들이 데이터를 공유하기 쉽다.
- 하지만 싱글톤 인스턴스가 많은 양의 데이터를 공유하게 된다면, 다른 클래스들 간 결합도가 높아져 수정이나 테스트하기 어려워질 수 있다. 
	public class Singleton {
		private Singleton() {}
		private static class SingletonHolder {
			public static final SingleTon INSTANCE = new Singleton();
		}
		public static Singleton getSingletonObject() {
			return SingletonHolder.INSTANCE;
		}
	}


5. 상속
- 상속이란 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것이다.
- 상속을 통해서 클래스를 작성하면 보다 적은 양의 코드로 새로운 클래스를 작성할 수 있고 코드를 공통적으로 관리할 수 있기 때문에 코드의 추가 및 변경이 매우 용이하다.
- 이러한 특징은 코드의 재사용성을 높이고 코드의 중복을 제거하여 프로그램의 생산성과 유지보수에 크게 기여한다.
- 상속 구현 방법
	클래스의 이름 뒤에 상속받고자 하는 클래스의 이름을 'extends'키워드와 함께 작성해주기만 하면 된다.
	class Parent {		int age;
	}
	class Child extends Parent { }
	- Child클래스는 Parent클래스를 상속받았기 때문에 자동적으로 age라는 멤버변수가 추가된다. 
- 자바는 단일 상속만 지원하기 때문에 다중상속에 비해 불편한 점도 있겠지만, 클래스 간의 관계가 보다 명확해지고 코드를 더욱 신뢰할 수 있게 만들어준다는 점에서 이로운 면도 있다.
- 모든 클래스는 Object클래스를 상속받게 되어 있다. 따라서, toString() 이나 equals(Object o) 와 같은 메소드를 따로 정의하지 않고도 사용할 수 있었던 이유는 이 메소드들이 Object클래스에 정의된 것들이기 때문이다.
